// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* eslint-disable no-unused-vars */

// Script for handling the behaviour of the Assign panel's features

const assignTaskListTitle = "Actionable Emails (Generated By Blueprint)"
let assignTaskListId;
let assignTasks = [];
let nDays;
let unreadOnly;
let subjectLinePhrases = [];
let actionableEmails = [];

const taskNotesPrefix =
    '*** ' +
    'Made automatically with Blueprint. ' +
    'Please add notes above this line, ' +
    'and do not edit anything below this line. ' +
    'Blueprint needs this information to better serve you. ' +
    'Thank you for your understanding. ' +
    '***' +
    '\n';

/**
 * Process for initializing the assign panel after login or a change in settings
 */
function initializeAssignFeatures() {
  const actionItemsCountElement = document.getElementById('assignSuspectedActionItems');

  return Promise.all([getAssignPanelTasks(), fetchActionableEmails(subjectLinePhrases, unreadOnly, nDays)]).then((values) => {
    // Parse values from server
    const assignTasksResponse = values[0];
    const actionableEmailsResponse = values[1];

    assignTaskListId = assignTasksResponse.taskListId;
    assignTasks = assignTasksResponse.tasks;

    const tasksEmailIds =
        assignTasks
          .map((task) => parseEmailIdFromTaskNotes(task))
          .filter((id) => id !== null).sort();

    actionableEmails = actionableEmailsResponse.filter((message) => !binarySearch(message.id, tasksEmailIds));

    // Set the panel statistics
    actionItemsCountElement.innerText = actionableEmails.length;
  });
}

function parseEmailIdFromTaskNotes(task) {
  // Get emailId from end of message
  const notes = task.notes;
  const minimumLength = 'emailId:'.length;
  if (notes === undefined || notes.length < minimumLength) {
    return null;
  }

  let index = notes.length;
  let emailIdValue = '';
  while (emailIdValue.substr(0, 'emailId:'.length) !== 'emailId:' && index > 0) {
    emailIdValue = notes.charAt(index-1) + emailIdValue;
    index--;
  }
  if (index < 0) {
    console.log('No email ID found!');
    return null;
  }
  return emailIdValue.split(':')[1];
}

function addCurrentEmail() {
  const currentEmail = actionableEmails.shift();
  const newTaskNotes = taskNotesPrefix + 'emailId:' + currentEmail.id;
  const newTask = new Task(currentEmail.subject, newTaskNotes);

  postNewTask(assignTaskListId, newTask);
  displayNextEmail();
}

function skipCurrentEmail() {
  actionableEmails.shift();
  displayNextEmail();
}

function displayNextEmail() {
  const actionItemsCountElement =
      document.getElementById('assignSuspectedActionItems');
  const subjectLineElement = document.getElementById('assignSubject');

  actionItemsCountElement.innerText = actionableEmails.length;
  if (actionableEmails.length === 0) {
    subjectLineElement.innerText = '';
    disableAssignAcceptRejectButtons();
    return;
  }

  let subjectLine = actionableEmails[0].subject;
  console.log(subjectLine);
  if (subjectLine.length > 15) {
    // Bigger than some limit for the text box. Truncate / parse manually
  }
  subjectLineElement.innerText = subjectLine;
}

/**
 *
 * @returns {Promise<*>}
 */
function getAssignPanelTasks() {
  return getTaskListsAndTasks()
      .then((response) => {
        const assignTaskLists = response.taskLists.filter((taskList) => taskList.title === assignTaskListTitle)
        if (assignTaskLists.length === 0) {
          return postNewTaskList(assignTaskListTitle).
              then((taskList) => {
                return {
                  'taskListId': taskList.id,
                  'tasks': []
                };
          })
        } else {
          const assignTaskList = assignTaskLists[0];
          const assignTaskListTasks = response.tasks[assignTaskList.id];

          return {
            'taskListId': assignTaskLists[0].id,
            'tasks': assignTaskListTasks
          };
        }
      });
}

/**
 * Sets the values of the settings for the assign panel based on what is
 * present in the panel
 */
function setUpAssign() {
  const nDaysElement = document.getElementById('assignNDays');
  nDays = parseInt(nDaysElement.innerText);

  const unreadOnlyContainerElement =
      document.getElementById('assignUnreadOnlyIcon');
  const unreadOnlyUnselectedElement =
      unreadOnlyContainerElement
          .querySelector('.panel__toggle-icon--unselected');
  unreadOnly = unreadOnlyUnselectedElement.hasAttribute('hidden');

  const phrasesListElement = document.getElementById('assignList');
  const listElements = phrasesListElement.querySelectorAll('.panel__list-text');
  listElements.forEach((element) => subjectLinePhrases.push(element.innerText));

  initializeAssignFeatures()
      .then(() => enableAssignStartResetButton());
}

function revertSettings() {
  const nDaysElement = document.getElementById('assignNDays');
  nDaysElement.innerText = nDays;

  const unreadOnlyContainerElement =
      document.getElementById('assignUnreadOnlyIcon');
  const unreadOnlyUnselectedElement =
      unreadOnlyContainerElement
          .querySelector('.panel__toggle-icon--unselected');
  const unreadOnlySelectedElement =
      unreadOnlyContainerElement
          .querySelector('.panel__toggle-icon--selected');
  if (unreadOnly) {
    unreadOnlyUnselectedElement.setAttribute('hidden', '');
    unreadOnlySelectedElement.removeAttribute('hidden');
  } else {
    unreadOnlyUnselectedElement.removeAttribute('hidden');
    unreadOnlySelectedElement.setAttribute('hidden', '');
  }

  const phrasesListElement = document.getElementById('assignList');
  phrasesListElement.innerHTML = '';
  subjectLinePhrases.forEach((phrase) => createTextListElementFromString(phrase, 'assignList'));
}

/**
 * Get actionable emails from server. Used for assign panel
 *
 * @param {string[]} listOfPhrases list of words/phrases that the subject line
 *     of user's emails should be queried for
 * @param {boolean} unreadOnly true if only unread emails should be returned,
 *     false otherwise
 * @param {number} nDays number of days to check unread emails for.
 *     Should be an integer > 0
 * @return {Promise<Object>} returns promise that returns the JSON response
 *     from client. Should be list of ActionableMessage Objects. Will throw
 *     AuthenticationError in the case of a 403, or generic Error in
 *     case of other error code
 */
function fetchActionableEmails(listOfPhrases, unreadOnly, nDays) {
  const listOfPhrasesString = encodeListForUrl(listOfPhrases);
  const unreadOnlyString = unreadOnly.toString();
  const nDaysString = nDays.toString();

  const queryString =
      `/gmail-actionable-emails?subjectLinePhrases=${listOfPhrasesString}` +
      `&unreadOnly=${unreadOnlyString}&nDays=${nDaysString}`;

  return fetch(queryString)
      .then((response) => {
        switch (response.status) {
          case 200:
            return response.json();
          case 403:
            throw new AuthenticationError();
          default:
            throw new Error(response.status + ' ' + response.statusText);
        }
      });
}
